1. What design principles does this code violate?
	I honestly have no idea what's even going on here. This is the most unintuitive implementation of a TicTacToe game I could ever imagine. Why does it return a new Game() whenever you call play() instead of updating the board and returning the board that currently exists? Why doesn't it actually change the board at all when you make a move, so that if you want to play a game you have to create a new Game after every move? Why does it only check for wins on the rows but not on the columns or diagonals?? Absolutely nonsensical. 
	I don't know what design principle this is aiming for because I can't even understand why the code is doing what it's doing. My best guess, from looking at Slack and just from my own ideas, is that it has something to do with depending on Abstractions instead of Concrete objects because we're calling new to create a StringBuffer object. That would just involve eliminating the String s variable and instead directly passing in a concrete object that implements the abstract StringBuffer type. So that's all I've done to refactor.
2. Refactor the code to improve its design.

Game.java

public class Game {
   public StringBuffer board;

   public Game(StringBuffer s) { board = s;}

   public Game(StringBuffer s, int position, char player) {
      board = s;
      board.setCharAt(position, player);
   }

   public int move(char player) {
      for (int i = 0; i < 9; i++) {
         if (board.charAt(i) == '-') {
            Game game = play(i, player);
            if (game.winner() == player)
               return i;
         }
      }

      for (int i = 0; i < 9; i++) {
         if (board.charAt(i) == '-')
            return i;
      }
      return -1;
   }

   public Game play(int i, char player) {
      return new Game(this.board, i, player);
   }

   public char winner() {
      if (board.charAt(0) != '-'
            && board.charAt(0) == board.charAt(1)
            && board.charAt(1) == board.charAt(2))
         return board.charAt(0);
      if (board.charAt(3) != '-'
            && board.charAt(3) == board.charAt(4)
            && board.charAt(4) == board.charAt(5))
         return board.charAt(3);
      if (board.charAt(6) != '-'
            && board.charAt(6) == board.charAt(7)
            && board.charAt(7) == board.charAt(8))
         return board.charAt(6);
      return '-';
   }
}

GameTest.java

import junit.framework.*;

public class GameTest extends TestCase {

   public GameTest(StringBuffer s) {super(s);}

   public void testDefaultMove() {
      Game game = new Game("XOXOX-OXO");
      assertEquals(5, game.move('X'));

      game = new Game("XOXOXOOX-");
      assertEquals(8, game.move('O'));

      game = new Game("---------");
      assertEquals(0, game.move('X'));

      game = new Game("XXXXXXXXX");
      assertEquals(-1, game.move('X'));
   }

   public void testFindWinningMove() {
      Game game = new Game("XO-XX-OOX");
      assertEquals(5, game.move('X'));
   }
   public void testWinConditions() {
      Game game = new Game("---XXX---");
      assertEquals('X', game.winner());
   }
}

